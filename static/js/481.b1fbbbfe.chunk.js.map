{"version":3,"file":"static/js/481.b1fbbbfe.chunk.js","mappings":"2SAEaA,E,QAAUC,GAAAA,IAAH,sgB,SCuIpB,EArHa,WACX,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAWC,EAAAA,EAAAA,KAAXD,OAER,GAAsCE,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAwCF,EAAAA,EAAAA,UAAe,IAAIG,MAA3D,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BL,EAAAA,EAAAA,WAAmBM,EAAAA,EAAAA,MAA/C,eAAOC,EAAP,KAAeC,EAAf,MAEAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,GAAWH,KACV,CAACA,IAEJ,OAIII,EAAAA,EAAAA,IAA6B,CAC/BC,cAAe,CACbC,MAAO,GACPC,eAAgB,MANlBC,EADF,EACEA,aACAC,EAFF,EAEEA,QACaC,EAHf,EAGEC,UAAaD,QA8Bf,OACE,UAAC,EAAD,YACE,gBAAKE,UAAU,cAAf,UACE,SAAC,KAAD,CAAQC,MAAM,SAAC,MAAD,IAAcC,QAAS,kBAAMvB,KAA3C,qBAKF,iBAAKqB,UAAU,UAAf,iBACGZ,QADH,IACGA,OADH,EACGA,EAAQe,KAAI,SAACC,GAAD,OACX,SAAC,KAAD,CAEEC,KAAMD,EACNF,QAAS,kBAAMzB,EAAS,YAAD,OAAa2B,EAAKE,OAFpCF,EAAKE,QAMd,SAAC,KAAD,CAAMC,KAAK,SAASL,QAAS,kBAAMnB,GAAe,UAGpD,SAAC,KAAD,CACEyB,OAAQ1B,EACR2B,QAAS,kBAAM1B,GAAe,IAC9B2B,WAAW,4BAHb,UAKE,kBAAMC,SAAUf,GA/C+B,SAAC,GAG/C,IAFLF,EAEI,EAFJA,MACAC,EACI,EADJA,eAEMiB,GAAgBzB,EAAAA,EAAAA,KAEtBE,EAAU,GAAD,eACJuB,GADI,CAEP,CACEN,GAAIO,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBrB,MAAAA,EACAC,eAAAA,EACAqB,KAAM/B,EACNgC,MAAO,EACPC,aAAc,OAIlBnC,GAAe,GACfoC,EAAAA,GAAAA,QAAc,sCA4B8BnB,UAAU,WAAlD,WACE,SAAC,KAAD,CACEoB,KAAK,QACLvB,QAASA,EACTwB,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,SAAC,MAAD,QACEC,MAAM,SACNhB,KAAK,OACLiB,YAAY,2BACRF,QAKV,SAAC,KAAD,CACEL,MAAOhC,EACPwC,SAAU,SAACT,GAAD,OAAU9B,EAAgB8B,IACpCO,MAAM,qBACNC,YAAY,yCAGd,SAAC,KAAD,CACEJ,KAAK,iBACLvB,QAASA,EACTwB,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,SAAC,MAAD,QACEC,MAAM,+BACNC,YAAY,yCACRF,QAKV,SAAC,KAAD,CACEf,KAAK,SACLmB,WAAS,EACTzB,MAAM,SAAC,MAAD,IACN0B,UAAW7B,EAJb,iC,qDCzHH,IAAMX,EAAmB,YAC7ByC,aAAaC,QAAQ,2BACpBD,aAAaE,QAAQ,yBAA0BC,KAAKC,UAAU,KAEhE,IAAMC,EAAUL,aAAaC,QAAQ,0BAIrC,OAFsBI,GAAWF,KAAKG,MAAMD,K,qDCNvC,IAAM1C,EAAa,SAAC4C,GACzBP,aAAaE,QAAQ,yBAA0BC,KAAKC,UAAUG","sources":["pages/Home/styles.ts","pages/Home/index.tsx","services/events/getParsedStorage.ts","services/events/setStorage.ts"],"sourcesContent":["import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n\n  .w__controls {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    gap: 1rem;\n  }\n\n  .w__grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n    grid-auto-rows: 1fr;\n    gap: 2.4rem;\n  }\n\n  .wm__form {\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 5rem;\n\n    width: 100%;\n  }\n`\n","import { useState, useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Controller, SubmitHandler, useForm } from 'react-hook-form'\nimport { toast } from 'react-toastify'\nimport { MdCheck, MdLogout } from 'react-icons/md'\n\nimport { useAuth } from 'shared/hooks/auth'\nimport { IEvent } from 'shared/types'\n\nimport { setStorage, getParsedStorage } from 'services/events'\n\nimport { Card, Modal, DatePicker, Input, Textarea, Button } from 'components'\n\nimport * as S from './styles'\n\ntype RegisterEventInputs = {\n  title: string\n  additionalInfo: string\n}\n\nconst Home = (): React.ReactElement => {\n  const navigate = useNavigate()\n  const { logout } = useAuth()\n\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n  const [calendarDate, setCalendarDate] = useState<Date>(new Date())\n  const [events, setEvents] = useState<IEvent[]>(getParsedStorage())\n\n  useEffect(() => {\n    setStorage(events)\n  }, [events])\n\n  const {\n    handleSubmit,\n    control,\n    formState: { isDirty }\n  } = useForm<RegisterEventInputs>({\n    defaultValues: {\n      title: '',\n      additionalInfo: ''\n    }\n  })\n\n  const onSubmit: SubmitHandler<RegisterEventInputs> = ({\n    title,\n    additionalInfo\n  }) => {\n    const parsedStorage = getParsedStorage()\n\n    setEvents([\n      ...parsedStorage,\n      {\n        id: Math.round(Math.random() * 10000),\n        title,\n        additionalInfo,\n        date: calendarDate,\n        value: 0,\n        participants: []\n      }\n    ])\n\n    setModalIsOpen(false)\n    toast.success('Churras adicionado com sucesso!')\n  }\n\n  return (\n    <S.Wrapper>\n      <div className=\"w__controls\">\n        <Button icon={<MdLogout />} onClick={() => logout()}>\n          Sair\n        </Button>\n      </div>\n\n      <div className=\"w__grid\">\n        {events?.map((item: IEvent) => (\n          <Card\n            key={item.id}\n            data={item}\n            onClick={() => navigate(`/details/${item.id}`)}\n          />\n        ))}\n\n        <Card type=\"create\" onClick={() => setModalIsOpen(true)} />\n      </div>\n\n      <Modal\n        isOpen={modalIsOpen}\n        onClose={() => setModalIsOpen(false)}\n        modalTitle=\"Adicionar um novo churras\"\n      >\n        <form onSubmit={handleSubmit(onSubmit)} className=\"wm__form\">\n          <Controller\n            name=\"title\"\n            control={control}\n            render={({ field }) => (\n              <Input\n                label=\"Titulo\"\n                type=\"text\"\n                placeholder=\"Qual o motivo da festa?\"\n                {...field}\n              />\n            )}\n          />\n\n          <DatePicker\n            value={calendarDate}\n            onChange={(date) => setCalendarDate(date)}\n            label=\"Selecione uma data\"\n            placeholder=\"Escolha uma boa data para celebrar!\"\n          />\n\n          <Controller\n            name=\"additionalInfo\"\n            control={control}\n            render={({ field }) => (\n              <Textarea\n                label=\"Informações adicionais\"\n                placeholder=\"O que o pessoal não pode esquecer?\"\n                {...field}\n              />\n            )}\n          />\n\n          <Button\n            type=\"submit\"\n            fullWidth\n            icon={<MdCheck />}\n            disabled={!isDirty}\n          >\n            Adicionar\n          </Button>\n        </form>\n      </Modal>\n    </S.Wrapper>\n  )\n}\n\nexport default Home\n","import { IEvent } from 'shared/types/event'\n\nexport const getParsedStorage = (): IEvent[] => {\n  !localStorage.getItem('@churras-trinca/events') &&\n    localStorage.setItem('@churras-trinca/events', JSON.stringify([]))\n\n  const storage = localStorage.getItem('@churras-trinca/events')\n\n  const parsedStorage = storage && JSON.parse(storage)\n\n  return parsedStorage\n}\n","import { IEvent } from 'shared/types/event'\n\nexport const setStorage = (array: IEvent[]) => {\n  localStorage.setItem('@churras-trinca/events', JSON.stringify(array))\n}\n"],"names":["Wrapper","styled","navigate","useNavigate","logout","useAuth","useState","modalIsOpen","setModalIsOpen","Date","calendarDate","setCalendarDate","getParsedStorage","events","setEvents","useEffect","setStorage","useForm","defaultValues","title","additionalInfo","handleSubmit","control","isDirty","formState","className","icon","onClick","map","item","data","id","type","isOpen","onClose","modalTitle","onSubmit","parsedStorage","Math","round","random","date","value","participants","toast","name","render","field","label","placeholder","onChange","fullWidth","disabled","localStorage","getItem","setItem","JSON","stringify","storage","parse","array"],"sourceRoot":""}