{"version":3,"file":"static/js/89.9fe7daf4.chunk.js","mappings":"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","sources":["services/logins/getParsedLoginsStorage.ts","pages/Login/styled.ts","pages/Login/index.tsx","services/logins/validateLoginInStorage.ts","services/logins/setLoginInStorage.ts"],"sourcesContent":["import { ILogin } from 'shared/types/login'\n\nexport const getParsedLoginsStorage = (): ILogin[] => {\n  !localStorage.getItem('@churras-trinca/logins') &&\n    localStorage.setItem('@churras-trinca/logins', JSON.stringify([]))\n\n  const storage = localStorage.getItem('@churras-trinca/logins')\n\n  const parsedStorage = storage && JSON.parse(storage)\n\n  return parsedStorage\n}\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5rem;\n\n  .w__login-form,\n  .wm__register-form {\n    display: flex;\n    flex-direction: column;\n    gap: 5rem;\n\n    width: 100%;\n  }\n\n  .w__login-form {\n    max-width: 50rem;\n  }\n`\n","import React, { useState } from 'react'\nimport { toast } from 'react-toastify'\nimport { MdCreate } from 'react-icons/md'\n\nimport { validateLoginInStorage, setLoginInStorage } from 'services/logins'\nimport { useAuth } from 'shared/hooks/auth'\nimport { Input, Button, Modal } from 'components'\n\nimport * as S from './styled'\n\ninterface ILoginInputs {\n  email: string\n  password: string\n}\n\ninterface IRegisterInputs {\n  email: string\n  password: string\n}\n\nconst Login = (): React.ReactElement => {\n  const { login } = useAuth()\n\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n  const [loginForm, setLoginForm] = useState<ILoginInputs>({\n    email: '',\n    password: ''\n  })\n  const [registerForm, setRegisterForm] = useState<IRegisterInputs>({\n    email: '',\n    password: ''\n  })\n\n  const onLoginSubmit = (event: React.FormEvent) => {\n    event.preventDefault()\n\n    const { email, password } = loginForm\n\n    const authenticated = validateLoginInStorage(email, password)\n\n    if (authenticated) {\n      login(authenticated)\n      setLoginForm({\n        email: '',\n        password: ''\n      })\n    }\n  }\n\n  const onRegisterSubmit = (event: React.FormEvent) => {\n    event.preventDefault()\n\n    const { email, password } = registerForm\n\n    setLoginInStorage(email, password)\n\n    setModalIsOpen(false)\n    setRegisterForm({\n      email: '',\n      password: ''\n    })\n\n    toast.success('Login cadastrado com sucesso!')\n  }\n\n  return (\n    <S.Wrapper>\n      <form onSubmit={onLoginSubmit} className=\"w__login-form\">\n        <Input\n          value={loginForm.email}\n          onChange={(event) =>\n            setLoginForm((prevValue) => ({\n              ...prevValue,\n              email: event.target.value\n            }))\n          }\n          label=\"E-mail\"\n          type=\"email\"\n          placeholder=\"exemplo@exemplo.com\"\n          autoFocus\n        />\n\n        <Input\n          value={loginForm.password}\n          onChange={(event) =>\n            setLoginForm((prevValue) => ({\n              ...prevValue,\n              password: event.target.value\n            }))\n          }\n          name=\"password\"\n          label=\"Senha\"\n          type=\"password\"\n          placeholder=\"Sua senha\"\n        />\n\n        <Button variant=\"default\" type=\"submit\" fullWidth>\n          Entrar\n        </Button>\n      </form>\n\n      <Button variant=\"ghost\" onClick={() => setModalIsOpen(true)}>\n        Primeira vez? Cadastre-se!\n      </Button>\n\n      <Modal\n        isOpen={modalIsOpen}\n        modalTitle=\"Adicionar Conta\"\n        onClose={() => setModalIsOpen(false)}\n      >\n        <form onSubmit={onRegisterSubmit} className=\"wm__register-form\">\n          <Input\n            value={registerForm.email}\n            onChange={(event) =>\n              setRegisterForm((prevValue) => ({\n                ...prevValue,\n                email: event.target.value\n              }))\n            }\n            label=\"E-mail\"\n            type=\"email\"\n            placeholder=\"Seu email, tipo: exemplo@exemplo.com\"\n            autoFocus\n          />\n\n          <Input\n            value={registerForm.password}\n            onChange={(event) =>\n              setRegisterForm((prevValue) => ({\n                ...prevValue,\n                password: event.target.value\n              }))\n            }\n            label=\"Senha\"\n            type=\"password\"\n            placeholder=\"Sua senha secreta ;)\"\n          />\n\n          <Button\n            variant=\"default\"\n            fullWidth\n            icon={<MdCreate />}\n            type=\"submit\"\n            disabled={!registerForm.email || !registerForm.password}\n          >\n            Adicionar\n          </Button>\n        </form>\n      </Modal>\n    </S.Wrapper>\n  )\n}\n\nexport default Login\n","import { toast } from 'react-toastify'\nimport { ILogin } from 'shared/types'\n\nimport { getParsedLoginsStorage } from './getParsedLoginsStorage'\n\nexport const validateLoginInStorage = (\n  email: string,\n  password: string\n): ILogin | null => {\n  const parsedStorage = getParsedLoginsStorage()\n\n  const filter = parsedStorage.filter(\n    (login) => login.email === email && login.password === password\n  )\n\n  if (filter[0]) return filter[0]\n\n  toast.error('Login invÃ¡lido.')\n  return null\n}\n","import { ILogin } from 'shared/types'\nimport { generateId } from 'shared/utils'\n\nimport { getParsedLoginsStorage } from './getParsedLoginsStorage'\n\nexport const setLoginInStorage = (email: string, password: string) => {\n  const parsedStorage = getParsedLoginsStorage()\n\n  const newStorage: ILogin[] = [\n    ...parsedStorage,\n    {\n      id: generateId(),\n      email,\n      password\n    }\n  ]\n\n  localStorage.setItem('@churras-trinca/logins', JSON.stringify(newStorage))\n}\n"],"names":["getParsedLoginsStorage","localStorage","getItem","setItem","JSON","stringify","storage","parse","Wrapper","styled","login","useAuth","useState","modalIsOpen","setModalIsOpen","email","password","loginForm","setLoginForm","registerForm","setRegisterForm","onSubmit","event","preventDefault","authenticated","filter","toast","validateLoginInStorage","className","value","onChange","prevValue","target","label","type","placeholder","autoFocus","name","variant","fullWidth","onClick","isOpen","modalTitle","onClose","parsedStorage","newStorage","id","generateId","setLoginInStorage","icon","disabled"],"sourceRoot":""}