{"version":3,"file":"static/js/572.15a569dd.chunk.js","mappings":"0PAEaA,EAAyB,YACnCC,aAAaC,QAAQ,2BACpBD,aAAaE,QAAQ,yBAA0BC,KAAKC,UAAU,KAEhE,IAAMC,EAAUL,aAAaC,QAAQ,0BAIrC,OAFsBI,GAAWF,KAAKG,MAAMD,I,mBCNjCE,E,QAAUC,GAAAA,IAAH,oS,SCgJpB,EA3Hc,WACZ,IAAQC,GAAUC,EAAAA,EAAAA,KAAVD,MAER,GAAsCE,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAEMC,GAAeC,EAAAA,EAAAA,IAAwB,CAC3CC,cAAe,CACbC,MAAO,GACPC,SAAU,MAIRC,GAAYJ,EAAAA,EAAAA,IAAqB,CACrCC,cAAe,CACbC,MAAO,GACPC,SAAU,MAkBd,OACE,UAAC,EAAD,YACE,kBACEE,SAAUD,EAAUE,cAjBwB,SAAC,GAAyB,IACpEC,ECtC4B,SACpCL,EACAC,GAEA,IAEMK,EAFgBxB,IAEOwB,QAC3B,SAACd,GAAD,OAAWA,EAAMQ,QAAUA,GAASR,EAAMS,WAAaA,KAGzD,OAAIK,EAAO,GAAWA,EAAO,IAE7BC,EAAAA,GAAAA,MAAY,sBACL,MDyBiBC,CADmD,EAAtBR,MAAsB,EAAfC,UAExDI,GAAiBb,EAAMa,MAgBrBI,UAAU,gBAFZ,WAIE,SAAC,KAAD,CACEC,KAAK,QACLC,QAAST,EAAUS,QACnBC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,SAAC,MAAD,QACEC,MAAM,SACNC,KAAK,QACLC,YAAY,uBACRH,QAKV,SAAC,KAAD,CACEH,KAAK,WACLC,QAAST,EAAUS,QACnBC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,SAAC,MAAD,QACEC,MAAM,QACNC,KAAK,WACLC,YAAY,aACRH,QAKV,SAAC,KAAD,CAAQE,KAAK,SAASE,WAAS,EAA/B,wBAKF,SAAC,KAAD,CAAQC,QAAQ,QAAQC,QAAS,kBAAMvB,GAAe,IAAtD,yCAIA,SAAC,KAAD,CACEwB,OAAQzB,EACR0B,WAAW,WACXC,QAAS,kBAAM1B,GAAe,IAHhC,UAKE,kBACEO,SAAUN,EAAaO,cAxDyB,SAAC,IEzC1B,SAACJ,EAAeC,GAC/C,IAAMsB,EAAgBzC,IAEhB0C,EAAoB,kBACrBD,GADqB,CAExB,CACEE,GCZ0BC,KAAKC,MAAsB,IAAhBD,KAAKE,UDa1C5B,MAAAA,EACAC,SAAAA,KAIJlB,aAAaE,QAAQ,yBAA0BC,KAAKC,UAAUqC,IFiC5DK,CADI,EAFJ7B,MAEI,EADJC,UAGAL,GAAe,GACfW,EAAAA,GAAAA,QAAc,oCAmDRE,UAAU,oBAFZ,WAIE,SAAC,KAAD,CACEC,KAAK,QACLC,QAASd,EAAac,QACtBC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,SAAC,MAAD,QACEC,MAAM,SACNC,KAAK,QACLC,YAAY,uBACRH,QAKV,SAAC,KAAD,CACEH,KAAK,WACLC,QAASd,EAAac,QACtBC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,SAAC,MAAD,QACEC,MAAM,QACNC,KAAK,WACLC,YAAY,aACRH,QAKV,SAAC,KAAD,CACEI,WAAS,EACTa,MAAM,SAAC,MAAD,IACNf,KAAK,SACLgB,UAAWlC,EAAamC,UAAUC,QAJpC","sources":["services/logins/getParsedLoginsStorage.ts","pages/Login/styled.ts","pages/Login/index.tsx","services/logins/validateLoginInStorage.ts","services/logins/setLoginInStorage.ts","utils/generate-id.ts"],"sourcesContent":["import { ILogin } from 'shared/types/login'\n\nexport const getParsedLoginsStorage = (): ILogin[] => {\n  !localStorage.getItem('@churras-trinca/logins') &&\n    localStorage.setItem('@churras-trinca/logins', JSON.stringify([]))\n\n  const storage = localStorage.getItem('@churras-trinca/logins')\n\n  const parsedStorage = storage && JSON.parse(storage)\n\n  return parsedStorage\n}\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 5rem;\n\n  .w__login-form,\n  .wm__register-form {\n    display: flex;\n    flex-direction: column;\n    gap: 5rem;\n\n    width: 100%;\n  }\n\n  .w__login-form {\n    max-width: 50rem;\n  }\n`\n","import { useState } from 'react'\nimport { Controller, SubmitHandler, useForm } from 'react-hook-form'\nimport { toast } from 'react-toastify'\nimport { MdCreate } from 'react-icons/md'\n\nimport { useAuth } from 'shared/hooks/auth'\n\nimport { validateLoginInStorage, setLoginInStorage } from 'services/logins'\n\nimport { Input, Button, Modal } from 'components'\n\nimport * as S from './styled'\n\ntype LoginInputs = {\n  email: string\n  password: string\n}\n\ntype RegisterInputs = {\n  email: string\n  password: string\n}\n\nconst Login = (): React.ReactElement => {\n  const { login } = useAuth()\n\n  const [modalIsOpen, setModalIsOpen] = useState(false)\n\n  const registerForm = useForm<RegisterInputs>({\n    defaultValues: {\n      email: '',\n      password: ''\n    }\n  })\n\n  const loginForm = useForm<LoginInputs>({\n    defaultValues: {\n      email: '',\n      password: ''\n    }\n  })\n\n  const onLoginSubmit: SubmitHandler<LoginInputs> = ({ email, password }) => {\n    const authenticated = validateLoginInStorage(email, password)\n    !!authenticated && login(authenticated)\n  }\n\n  const onRegisterSubmit: SubmitHandler<RegisterInputs> = ({\n    email,\n    password\n  }) => {\n    setLoginInStorage(email, password)\n    setModalIsOpen(false)\n    toast.success('Login cadastrado com sucesso!')\n  }\n\n  return (\n    <S.Wrapper>\n      <form\n        onSubmit={loginForm.handleSubmit(onLoginSubmit)}\n        className=\"w__login-form\"\n      >\n        <Controller\n          name=\"email\"\n          control={loginForm.control}\n          render={({ field }) => (\n            <Input\n              label=\"E-mail\"\n              type=\"email\"\n              placeholder=\"exemplo@exemplo.com\"\n              {...field}\n            />\n          )}\n        />\n\n        <Controller\n          name=\"password\"\n          control={loginForm.control}\n          render={({ field }) => (\n            <Input\n              label=\"Senha\"\n              type=\"password\"\n              placeholder=\"Sua senha\"\n              {...field}\n            />\n          )}\n        />\n\n        <Button type=\"submit\" fullWidth>\n          Entrar\n        </Button>\n      </form>\n\n      <Button variant=\"ghost\" onClick={() => setModalIsOpen(true)}>\n        Primeira vez? Cadastre-se!\n      </Button>\n\n      <Modal\n        isOpen={modalIsOpen}\n        modalTitle=\"Cadastro\"\n        onClose={() => setModalIsOpen(false)}\n      >\n        <form\n          onSubmit={registerForm.handleSubmit(onRegisterSubmit)}\n          className=\"wm__register-form\"\n        >\n          <Controller\n            name=\"email\"\n            control={registerForm.control}\n            render={({ field }) => (\n              <Input\n                label=\"E-mail\"\n                type=\"email\"\n                placeholder=\"exemplo@exemplo.com\"\n                {...field}\n              />\n            )}\n          />\n\n          <Controller\n            name=\"password\"\n            control={registerForm.control}\n            render={({ field }) => (\n              <Input\n                label=\"Senha\"\n                type=\"password\"\n                placeholder=\"Sua senha\"\n                {...field}\n              />\n            )}\n          />\n\n          <Button\n            fullWidth\n            icon={<MdCreate />}\n            type=\"submit\"\n            disabled={!registerForm.formState.isDirty}\n          >\n            Criar Conta\n          </Button>\n        </form>\n      </Modal>\n    </S.Wrapper>\n  )\n}\n\nexport default Login\n","import { toast } from 'react-toastify'\nimport { ILogin } from 'shared/types'\n\nimport { getParsedLoginsStorage } from './getParsedLoginsStorage'\n\nexport const validateLoginInStorage = (\n  email: string,\n  password: string\n): ILogin | null => {\n  const parsedStorage = getParsedLoginsStorage()\n\n  const filter = parsedStorage.filter(\n    (login) => login.email === email && login.password === password\n  )\n\n  if (filter[0]) return filter[0]\n\n  toast.error('Login invÃ¡lido.')\n  return null\n}\n","import { ILogin } from 'shared/types/login'\n\nimport { generateId } from 'utils/generate-id'\n\nimport { getParsedLoginsStorage } from './getParsedLoginsStorage'\n\nexport const setLoginInStorage = (email: string, password: string) => {\n  const parsedStorage = getParsedLoginsStorage()\n\n  const newStorage: ILogin[] = [\n    ...parsedStorage,\n    {\n      id: generateId(),\n      email,\n      password\n    }\n  ]\n\n  localStorage.setItem('@churras-trinca/logins', JSON.stringify(newStorage))\n}\n","export const generateId = () => Math.round(Math.random() * 10000)\n"],"names":["getParsedLoginsStorage","localStorage","getItem","setItem","JSON","stringify","storage","parse","Wrapper","styled","login","useAuth","useState","modalIsOpen","setModalIsOpen","registerForm","useForm","defaultValues","email","password","loginForm","onSubmit","handleSubmit","authenticated","filter","toast","validateLoginInStorage","className","name","control","render","field","label","type","placeholder","fullWidth","variant","onClick","isOpen","modalTitle","onClose","parsedStorage","newStorage","id","Math","round","random","setLoginInStorage","icon","disabled","formState","isDirty"],"sourceRoot":""}